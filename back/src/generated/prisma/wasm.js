
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  roleId: 'roleId'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.ThemeScalarFieldEnum = {
  id: 'id',
  colorName: 'colorName',
  colorHex: 'colorHex',
  createdAt: 'createdAt'
};

exports.Prisma.PotScalarFieldEnum = {
  id: 'id',
  name: 'name',
  targetAmount: 'targetAmount',
  totalAmount: 'totalAmount',
  createdAt: 'createdAt',
  userId: 'userId',
  themeId: 'themeId'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  maximumSpend: 'maximumSpend',
  userId: 'userId',
  themeId: 'themeId',
  categoryId: 'categoryId'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  amount: 'amount',
  recurring: 'recurring',
  userId: 'userId',
  budgetId: 'budgetId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  Category: 'Category',
  Theme: 'Theme',
  Pot: 'Pot',
  Budget: 'Budget',
  Transaction: 'Transaction'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "E:\\dev\\front-end\\Personal\\9-personalFinanceApp\\back\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "E:\\dev\\front-end\\Personal\\9-personalFinanceApp\\back\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mongodb",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name      String\n  email     String   @unique\n  password  String\n  createdAt DateTime @default(now())\n\n  roleId String @map(\"role_id\") @db.ObjectId\n  role   Role   @relation(fields: [roleId], references: [id])\n\n  pots         Pot[]\n  budgets      Budget[]\n  transactions Transaction[]\n}\n\nmodel Role {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name      String   @unique\n  createdAt DateTime @default(now())\n\n  users User[]\n}\n\nmodel Category {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name      String   @unique\n  createdAt DateTime @default(now())\n\n  budgets Budget[]\n}\n\nmodel Theme {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  colorName String   @unique @map(\"color_name\")\n  colorHex  String   @unique @map(\"color_hex\")\n  createdAt DateTime @default(now())\n\n  pots    Pot[]\n  budgets Budget[]\n}\n\nmodel Pot {\n  id           String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name         String\n  targetAmount Float    @map(\"target_amount\")\n  totalAmount  Float    @map(\"total_amount\")\n  createdAt    DateTime @default(now())\n\n  userId String @map(\"user_id\") @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id])\n\n  themeId String @map(\"theme_id\") @db.ObjectId\n  theme   Theme  @relation(fields: [themeId], references: [id])\n\n  @@unique([name, userId])\n}\n\nmodel Budget {\n  id           String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  maximumSpend Float\n\n  userId String @map(\"user_id\") @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id])\n\n  themeId String @map(\"theme_id\") @db.ObjectId\n  theme   Theme  @relation(fields: [themeId], references: [id])\n\n  categoryId String   @map(\"category_id\") @db.ObjectId\n  category   Category @relation(fields: [categoryId], references: [id])\n\n  transactions Transaction[]\n\n  @@unique([categoryId, userId])\n}\n\nmodel Transaction {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name      String\n  date      DateTime\n  amount    Float\n  recurring Boolean\n\n  userId String @map(\"user_id\") @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id])\n\n  budgetId String @map(\"budget_id\") @db.ObjectId\n  budget   Budget @relation(fields: [budgetId], references: [id])\n}\n",
  "inlineSchemaHash": "1bb1c97ef24dbc933325c05d97f119ed3ec5c26f18f1c46ba60323d7c2e77c33",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"roleId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"role_id\"},{\"name\":\"role\",\"kind\":\"object\",\"type\":\"Role\",\"relationName\":\"RoleToUser\"},{\"name\":\"pots\",\"kind\":\"object\",\"type\":\"Pot\",\"relationName\":\"PotToUser\"},{\"name\":\"budgets\",\"kind\":\"object\",\"type\":\"Budget\",\"relationName\":\"BudgetToUser\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TransactionToUser\"}],\"dbName\":null},\"Role\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RoleToUser\"}],\"dbName\":null},\"Category\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"budgets\",\"kind\":\"object\",\"type\":\"Budget\",\"relationName\":\"BudgetToCategory\"}],\"dbName\":null},\"Theme\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"colorName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"color_name\"},{\"name\":\"colorHex\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"color_hex\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"pots\",\"kind\":\"object\",\"type\":\"Pot\",\"relationName\":\"PotToTheme\"},{\"name\":\"budgets\",\"kind\":\"object\",\"type\":\"Budget\",\"relationName\":\"BudgetToTheme\"}],\"dbName\":null},\"Pot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetAmount\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"target_amount\"},{\"name\":\"totalAmount\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"total_amount\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PotToUser\"},{\"name\":\"themeId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"theme_id\"},{\"name\":\"theme\",\"kind\":\"object\",\"type\":\"Theme\",\"relationName\":\"PotToTheme\"}],\"dbName\":null},\"Budget\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"maximumSpend\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BudgetToUser\"},{\"name\":\"themeId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"theme_id\"},{\"name\":\"theme\",\"kind\":\"object\",\"type\":\"Theme\",\"relationName\":\"BudgetToTheme\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"category_id\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"BudgetToCategory\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"BudgetToTransaction\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"recurring\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TransactionToUser\"},{\"name\":\"budgetId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"budget_id\"},{\"name\":\"budget\",\"kind\":\"object\",\"type\":\"Budget\",\"relationName\":\"BudgetToTransaction\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

