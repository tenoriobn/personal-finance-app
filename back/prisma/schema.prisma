generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  roleId      String   @db.ObjectId @map("role_id")
  role        Role     @relation(fields: [roleId], references: [id])

  pots          Pot[]
  budgets       Budget[]
  transactions  Transaction[]
}

model Role {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  
  users     User[]
}

model Category {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  createdAt DateTime    @default(now())

  budgets       Budget[]
}

model Theme {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  colorName  String     @unique @map("color_name")
  colorHex   String     @unique @map("color_hex")
  createdAt  DateTime   @default(now())

  pots       Pot[]
  budgets    Budget[]
}

model Pot {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  targetAmount    Float     @map("target_amount")
  totalAmount     Float     @map("total_amount")
  createdAt       DateTime  @default(now())

  userId          String    @db.ObjectId @map("user_id")
  user            User      @relation(fields: [userId], references: [id])

  themeId         String    @db.ObjectId @map("theme_id")
  theme           Theme     @relation(fields: [themeId], references: [id])

  @@unique([name, userId])
}

model Budget {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  maximumSpend    Float

  userId          String    @db.ObjectId @map("user_id")
  user            User      @relation(fields: [userId], references: [id])

  themeId         String    @db.ObjectId @map("theme_id")
  theme           Theme     @relation(fields: [themeId], references: [id])

  categoryId      String    @db.ObjectId @map("category_id")
  category        Category  @relation(fields: [categoryId], references: [id])

  transactions    Transaction[]

   @@unique([categoryId, userId])
}

model Transaction {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  date       DateTime
  amount     Float
  recurring  Boolean

  userId     String   @db.ObjectId @map("user_id")
  user       User     @relation(fields: [userId], references: [id])

  budgetId   String   @db.ObjectId @map("budget_id")
  budget     Budget   @relation(fields: [budgetId], references: [id])
}